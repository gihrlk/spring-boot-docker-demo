name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and test job
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Make Maven wrapper executable
      run: chmod +x ./mvnw
    
    - name: Build and Test with Maven
      run: ./mvnw -B clean verify -Dmaven.test.failure.ignore=true
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
        SPRING_DATASOURCE_USERNAME: postgres
        SPRING_DATASOURCE_PASSWORD: postgres
        SPRING_PROFILES_ACTIVE: test
    
    - name: Debug test results
      if: always()
      run: |
        echo "Listing target directory:"
        ls -la target || echo "No target directory"
        echo "Listing test directories:"
        ls -la target/surefire-reports || echo "No surefire-reports directory"
        ls -la target/failsafe-reports || echo "No failsafe-reports directory"
        
        # Create directories if needed
        mkdir -p target/surefire-reports
        mkdir -p target/failsafe-reports
        touch target/surefire-reports/dummy.txt
        touch target/failsafe-reports/dummy.txt
    
    - name: Upload Test Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports
        path: |
          target/surefire-reports
          target/failsafe-reports
        if-no-files-found: warn
    
    - name: Upload JAR
      uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: target/*.jar
        if-no-files-found: error

  # Docker build and test job
  docker-build-and-test:
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download JAR
      uses: actions/download-artifact@v4
      with:
        name: app-jar
        path: target
    
    - name: Display structure of downloaded files
      run: ls -la target/
    
    - name: Build Docker Image
      run: docker build -t spring-boot-docker-demo:${{ github.sha }} .
    
    - name: Run Container Tests
      run: |
        docker run -d --name test-app -p 8080:8080 spring-boot-docker-demo:${{ github.sha }}
        sleep 30
        curl -f http://localhost:8080/actuator/health || exit 1
        curl -f http://localhost:8080/users || exit 1
        docker stop test-app
        docker rm test-app

  # Docker push job (only on main branch, not PRs)
  docker-push:
    if: github.event_name != 'pull_request'
    needs: docker-build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,format=short
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }} 